"""
–ê–≤—Ç–æ—Ä: –ö–æ–Ω—Å—Ç–∞–Ω—Ç–∏–Ω –û–¥–∏–Ω—Ü–æ–≤
e-mail: kos5172@yandex.ru
Github: https://github.com/odintsovkos
–≠—Ç–æ—Ç —Ñ–∞–π–ª ‚Äî —á–∞—Å—Ç—å SDTelegramBot.

SDTelegramBot ‚Äî —Å–≤–æ–±–æ–¥–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞: –≤—ã –º–æ–∂–µ—Ç–µ –ø–µ—Ä–µ—Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è—Ç—å –µ–µ –∏/–∏–ª–∏ –∏–∑–º–µ–Ω—è—Ç—å –µ–µ –Ω–∞ —É—Å–ª–æ–≤–∏—è—Ö –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ GNU –≤ —Ç–æ–º –≤–∏–¥–µ, –≤ –∫–∞–∫–æ–º –æ–Ω–∞ –±—ã–ª–∞ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞ –§–æ–Ω–¥–æ–º —Å–≤–æ–±–æ–¥–Ω–æ–≥–æ –ø—Ä–æ–≥—Ä–∞–º–º–Ω–æ–≥–æ –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è; –ª–∏–±–æ –≤–µ—Ä—Å–∏–∏ 3 –ª–∏—Ü–µ–Ω–∑–∏–∏, –ª–∏–±–æ (–ø–æ –≤–∞—à–µ–º—É –≤—ã–±–æ—Ä—É) –ª—é–±–æ–π –±–æ–ª–µ–µ –ø–æ–∑–¥–Ω–µ–π –≤–µ—Ä—Å–∏–∏.

SDTelegramBot —Ä–∞—Å–ø—Ä–æ—Å—Ç—Ä–∞–Ω—è–µ—Ç—Å—è –≤ –Ω–∞–¥–µ–∂–¥–µ, —á—Ç–æ –æ–Ω–∞ –±—É–¥–µ—Ç –ø–æ–ª–µ–∑–Ω–æ–π, –Ω–æ –ë–ï–ó–û –í–°–Ø–ö–ò–• –ì–ê–†–ê–ù–¢–ò–ô; –¥–∞–∂–µ –±–µ–∑ –Ω–µ—è–≤–Ω–æ–π –≥–∞—Ä–∞–Ω—Ç–∏–∏ –¢–û–í–ê–†–ù–û–ì–û –í–ò–î–ê –∏–ª–∏ –ü–†–ò–ì–û–î–ù–û–°–¢–ò –î–õ–Ø –û–ü–†–ï–î–ï–õ–ï–ù–ù–´–• –¶–ï–õ–ï–ô. –ü–æ–¥—Ä–æ–±–Ω–µ–µ —Å–º. –≤ –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ GNU.

–í—ã –¥–æ–ª–∂–Ω—ã –±—ã–ª–∏ –ø–æ–ª—É—á–∏—Ç—å –∫–æ–ø–∏—é –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–π –æ–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–π –ª–∏—Ü–µ–Ω–∑–∏–∏ GNU –≤–º–µ—Å—Ç–µ —Å —ç—Ç–æ–π –ø—Ä–æ–≥—Ä–∞–º–º–æ–π. –ï—Å–ª–∏ —ç—Ç–æ –Ω–µ —Ç–∞–∫, —Å–º. <https://www.gnu.org/licenses/>.
"""

import asyncio
import threading
import os

from aiogram import types
from aiogram.dispatcher.filters import Text
from aiogram.types import InlineKeyboardButton

import settings.string_variables as str_var
from keyboards.inline.inline_menu import create_model_keyboard, create_lora_keyboard, create_style_keyboard, \
    settings_menu, main_menu
from loader import dp
from settings.bot_config import ADMINS
from states.all_states import SDStates
from utils.db_services import db_service
from utils.misc_func import change_style_db, change_lora_db, send_photo, change_model_callback, restarting_sd,translate_prompt, \
    is_sd_launched
from utils.waiting_bar import waiting_bar,waiting_bar_trascribe_audio
from utils.transcribe import transcribe_audio

from concurrent.futures import ThreadPoolExecutor

last_prompt = ""
response_list = []
callback_data = None


@dp.message_handler(state=SDStates.enter_prompt,content_types=types.ContentType.VOICE)
async def handle_voice_messages(message: types.Message):

    db_result = await db_service.db_get_sd_settings(message.from_user.id)
    if(db_result[25] == 1):
        # Get file ID
        audio_file_id = message.voice.file_id

        # Get file information
        file_info = await message.bot.get_file(audio_file_id)
        file_path = file_info.file_path

        # Extract the filename from the file path
        filename = os.path.basename(file_path)

        # Define the path where you want to store the file
        destination = os.path.join('temp', filename)

        # Download and save the file
        await message.bot.download_file(file_path, destination)
        print(db_result[26],"cuda",db_result[27],db_result[28])

        # Transcribe
        with ThreadPoolExecutor() as executor:
            future = executor.submit(transcribe_audio, destination,db_result[26],"cuda",db_result[27],db_result[28])
            # Display waiting bar
            chat_id,message_id = await waiting_bar_trascribe_audio(message.chat.id, future)
            result = future.result()
            await message.bot.delete_message(chat_id=chat_id, message_id=message_id)

        # Process the result
        global last_prompt
        result = await translate_prompt(result, message.from_user.id,True)
        last_prompt = result

        await message.bot.delete_message(message.chat.id, message.message_id)
        if is_sd_launched():
            await send_photo(message, message.from_user.id, last_prompt, response_list)
        else:
            await restarting_sd(message)
            await asyncio.sleep(2)
            await send_photo(message, message.from_user.id, last_prompt, response_list)
        # Delete the file
        try:
            os.remove(destination)
        except Exception as e:
            print(f"Error occurred while deleting file {destination}: {e}")
    else:
        await message.bot.send_message(message.chat.id,"Whisper –æ—Ç–∫–ª—é—á–µ–Ω–Ω, –≥–æ–ª–æ—Å–æ–≤—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è")


@dp.message_handler(state=SDStates.enter_prompt, content_types=types.ContentTypes.TEXT)
async def entered_prompt_handler(message: types.Message):
    global last_prompt
    
    result = await translate_prompt(message['text'],message.from_user.id)
    last_prompt = result

    await message.bot.delete_message(message.chat.id, message.message_id)
    if is_sd_launched():
        await send_photo(message, message.from_user.id, last_prompt, response_list)
    else:
        await restarting_sd(message)
        await asyncio.sleep(2)
        await send_photo(message, message.from_user.id, last_prompt, response_list)


@dp.callback_query_handler(state=SDStates.enter_prompt, text='repeat')
async def current_settings(callback: types.CallbackQuery):
    global last_prompt
    await callback.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if last_prompt.find('&') != -1:
        last_prompt = last_prompt[last_prompt.find('&') + 1:]
    if last_prompt != "":
        if is_sd_launched():
            await send_photo(callback.message, callback.from_user.id, last_prompt, response_list)
        else:
            await restarting_sd(callback)
            await asyncio.sleep(2)
            await send_photo(callback.message, callback.from_user.id, last_prompt, response_list)
    else:
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ Prompt", reply_markup=main_menu)


@dp.callback_query_handler(state=SDStates.enter_prompt, text='repeat_with_seed')
async def current_settings(callback: types.CallbackQuery):
    await callback.bot.delete_message(callback.message.chat.id, callback.message.message_id)
    if last_prompt != "":
        if is_sd_launched():
            await send_photo(callback.message, callback.from_user.id, last_prompt, response_list, with_seed=True)
        else:
            await restarting_sd(callback)
            await asyncio.sleep(2)
            await send_photo(callback.message, callback.from_user.id, last_prompt, response_list, with_seed=True)
    else:
        await callback.message.answer("‚úèÔ∏è –í–≤–µ–¥–∏—Ç–µ Prompt", reply_markup=main_menu)


@dp.callback_query_handler(state=SDStates.enter_prompt, text='model')
async def current_settings(callback: types.CallbackQuery):
    global callback_data
    callback_data = callback
    sd_model = await db_service.db_get_sd_setting(callback.from_user.id, "sd_model")
    models_keyboard = create_model_keyboard('sd-models', 'model_name')
    await callback.message.edit_text(f"<b>–¢–µ–∫—É—â–∞—è –º–æ–¥–µ–ª—å:</b>\n<i>{sd_model}</i>\n"
                                     f"üëáüèª –í—ã–±–µ—Ä–∏ –Ω–æ–≤—É—é –º–æ–¥–µ–ª—å...", reply_markup=models_keyboard)
    await SDStates.settings_set_model.set()


@dp.callback_query_handler(Text(startswith="model_"), state=SDStates.settings_set_model)
async def current_settings(callback: types.CallbackQuery):
    await callback.message.delete_reply_markup()
    action = callback.data[6:]
    await db_service.db_set_sd_settings(callback.from_user.id, 'sd_model', action)
    await callback.message.edit_text("–ó–∞–≥—Ä—É–∂–∞—é –º–æ–¥–µ–ª—å –≤ SD...")
    thread_change_model = threading.Thread(target=change_model_callback, args=(callback.from_user.id, response_list))
    thread_change_model.start()
    chat_id, message_id = await waiting_bar(callback.message.chat.id, thread_change_model)
    thread_change_model.join()
    await callback.bot.delete_message(chat_id=chat_id, message_id=message_id)
    await callback.message.edit_text(text=f"‚úÖ –ú–æ–¥–µ–ª—å –∑–∞–≥—Ä—É–∂–µ–Ω–∞", reply_markup=main_menu)
    response_list.clear()
    await SDStates.enter_prompt.set()


@dp.callback_query_handler(state=SDStates.enter_prompt, text='styles')
async def current_settings(callback: types.CallbackQuery):
    global callback_data
    callback_data = callback
    styles_keyboard = await create_style_keyboard(callback.from_user.id)
    await callback.message.edit_text(f"üëáüèª –í—ã–±–µ—Ä–∏ —Å—Ç–∏–ª–∏", reply_markup=styles_keyboard)
    await SDStates.settings_set_style.set()


@dp.callback_query_handler(Text(startswith="style_"), state=SDStates.settings_set_style)
async def current_settings(callback: types.CallbackQuery):
    action = callback.data[6:]

    if action == "confirm":
        await callback.message.edit_text("üìù –°—Ç–∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=main_menu)
        await SDStates.enter_prompt.set()
    elif action == "disable_all_styles":
        await callback.message.edit_text("üìù –°—Ç–∏–ª–∏ –æ—Ç–∫–ª—é—á–µ–Ω—ã", reply_markup=main_menu)
        await db_service.db_set_sd_settings(callback.from_user.id, "sd_style", "")
        await SDStates.enter_prompt.set()
    else:
        is_changed = await change_style_db(callback.from_user.id, action)
        styles_keyboard = await create_style_keyboard(callback.from_user.id)
        await callback.message.edit_text(f"–°—Ç–∏–ª—å {action} {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if is_changed else '–æ—Ç–∫–ª—é—á–µ–Ω'}",
                                         reply_markup=styles_keyboard)


@dp.callback_query_handler(state=SDStates.enter_prompt, text='loras')
async def current_settings(callback: types.CallbackQuery):
    global callback_data
    callback_data = callback
    lora_keyboard = await create_lora_keyboard(callback.from_user.id)
    if lora_keyboard is None:
        await callback.message.edit_text("LoRA –Ω–µ –Ω–∞–∏ÃÜ–¥–µ–Ω—ã", reply_markup=main_menu)
        await SDStates.enter_prompt.set()
        return
    await callback.message.edit_text(f"üëáüèª –í—ã–±–µ—Ä–∏ LoRa", reply_markup=lora_keyboard)
    await SDStates.settings_set_lora.set()


@dp.callback_query_handler(Text(startswith="lora_"), state=SDStates.settings_set_lora)
async def current_settings(callback: types.CallbackQuery):
    action = callback.data[5:]

    if action == "confirm":
        await callback.message.edit_text("üìù LoRa —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã", reply_markup=main_menu)
        await SDStates.enter_prompt.set()
    elif action == "disable_all_loras":
        await callback.message.edit_text("üìù Lora –æ—Ç–∫–ª—é—á–µ–Ω—ã", reply_markup=main_menu)
        await db_service.db_set_sd_settings(callback.from_user.id, "sd_lora", "")
        await SDStates.enter_prompt.set()
    else:
        is_changed = await change_lora_db(callback.from_user.id, action)
        lora_keyboard = await create_lora_keyboard(callback.from_user.id)
        await callback.message.edit_text(f"LoRa {action} {'—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω' if is_changed else '–æ—Ç–∫–ª—é—á–µ–Ω'}",
                                         reply_markup=lora_keyboard)


@dp.callback_query_handler(state=SDStates.enter_prompt, text='settings')
async def current_settings(callback: types.CallbackQuery):
    if str(callback.from_user.id) in ADMINS and settings_menu.inline_keyboard[-1][0].text != str_var.restart_sd:
        settings_menu.add(InlineKeyboardButton(text=str_var.restart_sd, callback_data="restart_sd"))
    await callback.message.edit_text("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏", reply_markup=settings_menu)
    await SDStates.settings.set()


@dp.callback_query_handler(state=[SDStates.settings_set_style,
                                  SDStates.settings_set_lora,
                                  SDStates.settings_set_model], text='cancel')
async def generation_settings(callback: types.CallbackQuery):
    await callback.message.edit_text("üìñ –ú–µ–Ω—é –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", reply_markup=main_menu)
    await SDStates.enter_prompt.set()
